var tipuesearch = {"pages":[{"text":"2017Spring 機械設計工程系協同產品設計實習 課程倉儲: http://github.com/mdecourse/2017springcd 課程投影片: http://mdecourse.github.io/2017springcd 課程網誌: http://mdecourse.github.io/2017springcd/blog","tags":"misc","url":"./pages/about/","title":"About"},{"text":"20170621W18 期末各週連結 第十一周連結 一.利用漸開線原理, 以 Brython 繪製單一正齒輪廓 第十二周連結 一.漸開線齒輪繪製 第十三周連結 一.行走機構 第十五周連結 一.在畫布正中央畫一個漸開線正齒輪輪廓,並在正齒輪中央寫上自己的學號。 二.畫出只有上半齒形的漸開線正齒輪輪廓 三.嚙合齒輪 四.在 Onshape 完成相同齒輪組的囓合協同繪圖 第十六周連結 一.聽學長的專題報告，個人報告延後。 第十七周連結 一.繪製一零件轉成html放入網誌 二.各組員網誌上的 2D 繪圖, 並將程式碼顯示在繪圖網誌文章中 三.把https://github.com/scrum-1/cdbw17這個倉儲設為subw17子目錄 四、五. Solvespace 近端零組件繪圖，轉入 V-rep。 Onshape: 漸開線齒輪 BG7行走機構 影片: 漸開線齒輪 齒輪嚙合 W17","tags":"Course","url":"./W18.html","title":"20170621w18"},{"text":"20170614W17 一. 繪製一零件轉成html放入網誌 二. 各組員網誌上的 2D 繪圖, 並將程式碼顯示在繪圖網誌文章中 window.onload=function(){ brython(1); } from browser import document as doc import math # 準備繪圖畫布 canvas = doc[\"japanflag1\"] ctx = canvas.getContext(\"2d\") # 以下可以利用 ctx 物件進行畫圖 # 先畫一條直線 ctx.beginPath() ctx.lineWidth = 5 picture_points = [ (300, 0), (300, 50), (50, 50), (50, 300), (0, 300), (0, 0) ] ctx.moveTo(0,0) for point in picture_points : ctx.lineTo(point[0],point[1]) ctx.strokeStyle = \"blue\" ctx.stroke() ctx.closePath() window.onload=function(){ brython(1); } from browser import document as doc import math # 準備繪圖畫布 canvas = doc[\"japanflag1\"] ctx = canvas.getContext(\"2d\") # 以下可以利用 ctx 物件進行畫圖 # 先畫一條直線 ctx.beginPath() ctx.lineWidth = 5 picture_points = [ (300, 0), (300, 50), (50, 50), (50, 300), (0, 300), (0, 0) ] ctx.moveTo(0,0) for point in picture_points : ctx.lineTo(point[0],point[1]) ctx.strokeStyle = \"blue\" ctx.stroke() ctx.closePath() 三. 把https://github.com/scrum-1/cdbw17這個倉儲設為subw17子目錄 git submodule -b master https://github.com/scrum-1/cdbw17 subw17 四、五 Solvespace 近端零組件繪圖，轉入 V-rep。 Untitled from 40423228 on Vimeo .","tags":"Course","url":"./W17.html","title":"20170614w17練習"},{"text":"20170607W16 聽學長的專題報告，個人報告延後。","tags":"Course","url":"./W16.html","title":"20170607w16"},{"text":"20170531W15 15周練習 一. 800x600 為畫布大小, 在畫布正中央畫一個半徑為 250 畫素, 壓力角 20, 齒數為 36 齒的漸開線正齒輪輪廓,並在正齒輪中央寫上自己的學號。 window.onload=function(){ // 設定 data/py 為共用程式路徑 brython({debug:1, pythonpath:['./../data/py']}); } from browser import document as doc import math # deg 為角度轉為徑度的轉換因子 deg = math.pi/180. # 定義 Spur 類別 class Spur(object): def __init__(self, ctx): self.ctx = ctx def create_line(self, x1, y1, x2, y2, width=3, fill=\"red\"): self.ctx.beginPath() self.ctx.lineWidth = width self.ctx.moveTo(x1, y1) self.ctx.lineTo(x2, y2) self.ctx.strokeStyle = fill self.ctx.stroke() # # 定義一個繪正齒輪的繪圖函式 # midx 為齒輪圓心 x 座標 # midy 為齒輪圓心 y 座標 # rp 為節圓半徑, n 為齒數 # pa 為壓力角 (deg) # rot 為旋轉角 (deg) # 已經針對 n 大於等於 52 齒時的繪圖錯誤修正, 因為 base circle 與齒根圓大小必須進行判斷 def Gear(self, midx, midy, rp, n=20, pa=20, color=\"black\"): # 齒輪漸開線分成 15 線段繪製 imax = 15 # 在輸入的畫布上繪製直線, 由圓心到節圓 y 軸頂點畫一直線 self.create_line(midx-rp, midy, midx+rp, midy) #繪製一垂直於上述的線 self.create_line(midx, midy-rp, midx, midy+rp) # 畫出 rp 圓, 畫圓函式尚未定義 #create_oval(midx-rp, midy-rp, midx+rp, midy+rp, width=2) # a 為模數 (代表公制中齒的大小), 模數為節圓直徑(稱為節徑)除以齒數 # 模數也就是齒冠大小 a=2*rp/n # d 為齒根大小, 為模數的 1.157 或 1.25倍, 這裡採 1.25 倍 d=2.5*rp/n # ra 為齒輪的外圍半徑 ra=rp+a # 畫出 ra 圓, 畫圓函式尚未定義 #create_oval(midx-ra, midy-ra, midx+ra, midy+ra, width=2) # rb 則為齒輪的基圓半徑 # 基圓為漸開線長齒之基準圓 rb=rp*math.cos(pa*deg) # 畫出 rb 圓 (基圓), 畫圓函式尚未定義 #create_oval(midx-rb, midy-rb, midx+rb, midy+rb, width=1) # rd 為齒根圓半徑 rd=rp-d # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd # 畫出 rd 圓 (齒根圓), 畫圓函式尚未定義 #create_oval(midx-rd, midy-rd, midx+rd, midy+rd, width=1) # dr 則為基圓到齒頂圓半徑分成 imax 段後的每段半徑增量大小 # 將圓弧分成 imax 段來繪製漸開線 # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd if rd>rb: dr = (ra-rd)/imax else: dr=(ra-rb)/imax # tan(pa*deg)-pa*deg 為漸開線函數 sigma=math.pi/(2*n)+math.tan(pa*deg)-pa*deg for j in range(n): ang=-2.*j*math.pi/n+sigma ang2=2.*j*math.pi/n+sigma lxd=midx+rd*math.sin(ang2-2.*math.pi/n) lyd=midy-rd*math.cos(ang2-2.*math.pi/n) for i in range(imax+1): # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd if rd>rb: r=rd+i*dr else: r=rb+i*dr theta=math.sqrt((r*r)/(rb*rb)-1.) alpha=theta-math.atan(theta) xpt=r*math.sin(alpha-ang) ypt=r*math.cos(alpha-ang) xd=rd*math.sin(-ang) yd=rd*math.cos(-ang) # i=0 時, 繪線起點由齒根圓上的點, 作為起點 if(i==0): last_x = midx+xd last_y = midy-yd # 由左側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點 self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color) # 最後一點, 則為齒頂圓 if(i==imax): lfx=midx+xpt lfy=midy-ypt last_x = midx+xpt last_y = midy-ypt # the line from last end of dedendum point to the recent # end of dedendum point # lxd 為齒根圓上的左側 x 座標, lyd 則為 y 座標 # 下列為齒根圓上用來近似圓弧的直線 self.create_line((lxd),(lyd),(midx+xd),(midy-yd),fill=color) for i in range(imax+1): # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd if rd>rb: r=rd+i*dr else: r=rb+i*dr theta=math.sqrt((r*r)/(rb*rb)-1.) alpha=theta-math.atan(theta) xpt=r*math.sin(ang2-alpha) ypt=r*math.cos(ang2-alpha) xd=rd*math.sin(ang2) yd=rd*math.cos(ang2) # i=0 時, 繪線起點由齒根圓上的點, 作為起點 if(i==0): last_x = midx+xd last_y = midy-yd # 由右側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點 self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color) # 最後一點, 則為齒頂圓 if(i==imax): rfx=midx+xpt rfy=midy-ypt last_x = midx+xpt last_y = midy-ypt # lfx 為齒頂圓上的左側 x 座標, lfy 則為 y 座標 # 下列為齒頂圓上用來近似圓弧的直線 self.create_line(lfx,lfy,rfx,rfy,fill=color) canvas = doc['onegear2'] ctx = canvas.getContext(\"2d\") x = (canvas.width)/2 y = (canvas.height)/2 r = 250 # 齒數 n = 36 # 壓力角 pa = 20 # 旋轉角 rot = pa Spur(ctx).Gear(x, y, r, n, pa, \"blue\") ctx.beginPath() ctx.fillStyle = \"#99DD00\" ctx.font = \"50px ScriptS\" ctx.fillText(\"40423228 \",300,315) ctx.stroke() 二. 畫出只有上半齒形的漸開線正齒輪輪廓 , 且該齒輪廓下方水平線, 連接兩端齒根圓點交的直線以紅色繪製, 且在齒輪下方以藍色字元寫上自己的學號. from browser import document as doc import math # deg 為角度轉為徑度的轉換因子 deg = math.pi/10. # 定義 Spur 類別 class Spur(object): def __init__(self, ctx): self.ctx = ctx def create_line(self, x1, y1, x2, y2, width=3, fill=\"red\"): self.ctx.beginPath() self.ctx.lineWidth = width self.ctx.moveTo(x1, y1) self.ctx.lineTo(x2, y2) self.ctx.strokeStyle = fill self.ctx.stroke() # # 定義一個繪正齒輪的繪圖函式 # midx 為齒輪圓心 x 座標 # midy 為齒輪圓心 y 座標 # rp 為節圓半徑, n 為齒數 # pa 為壓力角 (deg) # rot 為旋轉角 (deg) # 已經針對 n 大於等於 52 齒時的繪圖錯誤修正, 因為 base circle 與齒根圓大小必須進行判斷 def Gear(self, midx, midy, rp, n=20, pa=20, color=\"black\"): # 齒輪漸開線分成 15 線段繪製 imax = 15 # 在輸入的畫布上繪製直線, 由圓心到節圓 y 軸頂點畫一直線 self.create_line(midx, midy, midx+rp, midy) #繪製一垂直於上述的線 self.create_line(midx, midy-rp, midx, midy+rp) # 畫出 rp 圓, 畫圓函式尚未定義 #create_oval(midx-rp, midy-rp, midx+rp, midy+rp, width=2) # a 為模數 (代表公制中齒的大小), 模數為節圓直徑(稱為節徑)除以齒數 # 模數也就是齒冠大小 a=2*rp/n # d 為齒根大小, 為模數的 1.157 或 1.25倍, 這裡採 1.25 倍 d=2.5*rp/n # ra 為齒輪的外圍半徑 ra=rp+a # 畫出 ra 圓, 畫圓函式尚未定義 #create_oval(midx-ra, midy-ra, midx+ra, midy+ra, width=1) # rb 則為齒輪的基圓半徑 # 基圓為漸開線長齒之基準圓 rb=rp*math.cos(pa*deg) # 畫出 rb 圓 (基圓), 畫圓函式尚未定義 #create_oval(midx-rb, midy-rb, midx+rb, midy+rb, width=1) # rd 為齒根圓半徑 rd=rp-d # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd # 畫出 rd 圓 (齒根圓), 畫圓函式尚未定義 #create_oval(midx-rd, midy-rd, midx+rd, midy+rd, width=1) # dr 則為基圓到齒頂圓半徑分成 imax 段後的每段半徑增量大小 # 將圓弧分成 imax 段來繪製漸開線 # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd if rd>rb: dr = (ra-rd)/imax else: dr=(ra-rb)/imax # tan(pa*deg)-pa*deg 為漸開線函數 sigma=math.pi/(2*n)+math.tan(pa*deg)-pa*deg for j in range(19): ang=-2.*j*math.pi/n+sigma ang2=2.*j*math.pi/n+sigma lxd=midx+rd*math.sin(ang2-2.*math.pi/n) lyd=midy-rd*math.cos(ang2-2.*math.pi/n) for i in range(imax+1): # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd if rd>rb: r=rd+i*dr else: r=rb+i*dr theta=math.sqrt((r*r)/(rb*rb)-1.) alpha=theta-math.atan(theta) xpt=r*math.sin(alpha-ang) ypt=r*math.cos(alpha-ang) xd=rd*math.sin(-ang) yd=rd*math.cos(-ang) # i=0 時, 繪線起點由齒根圓上的點, 作為起點 if(i==0): last_x = midx+xd last_y = midy-yd # 由左側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點 self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color) # 最後一點, 則為齒頂圓 if(i==imax): lfx=midx+xpt lfy=midy-ypt last_x = midx+xpt last_y = midy-ypt # the line from last end of dedendum point to the recent # end of dedendum point # lxd 為齒根圓上的左側 x 座標, lyd 則為 y 座標 # 下列為齒根圓上用來近似圓弧的直線 self.create_line((lxd),(lyd),(midx+xd),(midy-yd),fill=color) for i in range(imax+1): # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd if rd>rb: r=rd+i*dr else: r=rb+i*dr theta=math.sqrt((r*r)/(rb*rb)-1.) alpha=theta-math.atan(theta) xpt=r*math.sin(ang2-alpha) ypt=r*math.cos(ang2-alpha) xd=rd*math.sin(ang2) yd=rd*math.cos(ang2) # i=0 時, 繪線起點由齒根圓上的點, 作為起點 if(i==0): last_x = midx+xd last_y = midy-yd # 由右側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點 self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color) # 最後一點, 則為齒頂圓 if(i==imax): rfx=midx+xpt rfy=midy-ypt last_x = midx+xpt last_y = midy-ypt # lfx 為齒頂圓上的左側 x 座標, lfy 則為 y 座標 # 下列為齒頂圓上用來近似圓弧的直線 self.create_line(lfx,lfy,rfx,rfy,fill=color) canvas = doc['onegear'] ctx = canvas.getContext(\"2d\") ctx.translate(110,800) ctx.rotate(math.pi/-2) x = (canvas.width)/2 y = (canvas.height)/2 r = 250 # 齒數 n = 36 # 壓力角 pa = 20 Spur(ctx).Gear(x, y, r, n, pa, \"blue\") ctx.beginPath() ctx.fillStyle = \"#0000AA\" ctx.font = \"50px ScriptS\" ctx.save(); ctx.translate(350, 200); ctx.rotate(math.pi/2); ctx.fillText(\"40423228\", 0, 0); ctx.stroke() 三. 組長從各組員的 submodule 設定中呼叫導入, 在各分組的網頁中完成一個畫出所有組員協同繪圖的齒輪減速組圖, 且各齒輪正中心必須寫上組員學號, 各組按照學號大小排序, 分別由最右邊齒數 16 齒開始囓合, 依序增加 2 齒, 當排至平面四齒囓合後, 第五位組員則以垂直方向向下囓合兩個齒輪後, 轉由右至左水平排列, 直至所有組員均各提供一個協同囓合用的齒輪為止 # 導入 browser 模組中的 document, 並設為 doc 變數 from browser import document as doc import math # deg 為角度轉為徑度的轉換因子 deg = math.pi/180. # 定義 Spur 類別 class Spur(object): def __init__(self, ctx): self.ctx = ctx def create_line(self, x1, y1, x2, y2, width=3, fill=\"red\"): self.ctx.beginPath() self.ctx.lineWidth = width self.ctx.moveTo(x1, y1) self.ctx.lineTo(x2, y2) self.ctx.strokeStyle = fill self.ctx.stroke() # # 定義一個繪正齒輪的繪圖函式 # midx 為齒輪圓心 x 座標 # midy 為齒輪圓心 y 座標 # rp 為節圓半徑, n 為齒數 # pa 為壓力角 (deg) # rot 為旋轉角 (deg) # 已經針對 n 大於等於 52 齒時的繪圖錯誤修正, 因為 base circle 與齒根圓大小必須進行判斷 def Gear(self, midx, midy, rp, n=20, pa=20, color=\"black\"): # 齒輪漸開線分成 15 線段繪製 imax = 15 # 在輸入的畫布上繪製直線, 由圓心到節圓 y 軸頂點畫一直線 self.create_line(midx, midy, midx, midy-rp) # 畫出 rp 圓, 畫圓函式尚未定義 #create_oval(midx-rp, midy-rp, midx+rp, midy+rp, width=2) # a 為模數 (代表公制中齒的大小), 模數為節圓直徑(稱為節徑)除以齒數 # 模數也就是齒冠大小 a=2*rp/n # d 為齒根大小, 為模數的 1.157 或 1.25倍, 這裡採 1.25 倍 d=2.5*rp/n # ra 為齒輪的外圍半徑 ra=rp+a # 畫出 ra 圓, 畫圓函式尚未定義 #create_oval(midx-ra, midy-ra, midx+ra, midy+ra, width=1) # rb 則為齒輪的基圓半徑 # 基圓為漸開線長齒之基準圓 rb=rp*math.cos(pa*deg) # 畫出 rb 圓 (基圓), 畫圓函式尚未定義 #create_oval(midx-rb, midy-rb, midx+rb, midy+rb, width=1) # rd 為齒根圓半徑 rd=rp-d # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd # 畫出 rd 圓 (齒根圓), 畫圓函式尚未定義 #create_oval(midx-rd, midy-rd, midx+rd, midy+rd, width=1) # dr 則為基圓到齒頂圓半徑分成 imax 段後的每段半徑增量大小 # 將圓弧分成 imax 段來繪製漸開線 # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd if rd>rb: dr = (ra-rd)/imax else: dr=(ra-rb)/imax # tan(pa*deg)-pa*deg 為漸開線函數 sigma=math.pi/(2*n)+math.tan(pa*deg)-pa*deg for j in range(n): ang=-2.*j*math.pi/n+sigma ang2=2.*j*math.pi/n+sigma lxd=midx+rd*math.sin(ang2-2.*math.pi/n) lyd=midy-rd*math.cos(ang2-2.*math.pi/n) for i in range(imax+1): # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd if rd>rb: r=rd+i*dr else: r=rb+i*dr theta=math.sqrt((r*r)/(rb*rb)-1.) alpha=theta-math.atan(theta) xpt=r*math.sin(alpha-ang) ypt=r*math.cos(alpha-ang) xd=rd*math.sin(-ang) yd=rd*math.cos(-ang) # i=0 時, 繪線起點由齒根圓上的點, 作為起點 if(i==0): last_x = midx+xd last_y = midy-yd # 由左側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點 self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color) # 最後一點, 則為齒頂圓 if(i==imax): lfx=midx+xpt lfy=midy-ypt last_x = midx+xpt last_y = midy-ypt # the line from last end of dedendum point to the recent # end of dedendum point # lxd 為齒根圓上的左側 x 座標, lyd 則為 y 座標 # 下列為齒根圓上用來近似圓弧的直線 self.create_line((lxd),(lyd),(midx+xd),(midy-yd),fill=color) for i in range(imax+1): # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd if rd>rb: r=rd+i*dr else: r=rb+i*dr theta=math.sqrt((r*r)/(rb*rb)-1.) alpha=theta-math.atan(theta) xpt=r*math.sin(ang2-alpha) ypt=r*math.cos(ang2-alpha) xd=rd*math.sin(ang2) yd=rd*math.cos(ang2) # i=0 時, 繪線起點由齒根圓上的點, 作為起點 if(i==0): last_x = midx+xd last_y = midy-yd # 由右側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點 self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color) # 最後一點, 則為齒頂圓 if(i==imax): rfx=midx+xpt rfy=midy-ypt last_x = midx+xpt last_y = midy-ypt # lfx 為齒頂圓上的左側 x 座標, lfy 則為 y 座標 # 下列為齒頂圓上用來近似圓弧的直線 self.create_line(lfx,lfy,rfx,rfy,fill=color) # 準備在 id=\"gear3\" 的 canvas 中繪圖 canvas = doc[\"gear3\"] ctx = canvas.getContext(\"2d\") # 模數決定齒的尺寸大小, 囓合齒輪組必須有相同的模數與壓力角 # 壓力角 pa 單位為角度 pa = 20 # 第1齒輪齒數 n_g1 = 16 # 第2齒輪齒數 n_g2 = 18 # 第3齒輪齒數 n_g3 = 20 # 第4齒輪齒數 n_g4 = 22 # m 為模數, 根據畫布的寬度, 計算適合的模數大小 m = (0.8*canvas.width)/(n_g1+n_g2+n_g3+n_g4) # 根據模數 m, 計算各齒輪的節圓半徑 rp_g1 = m*n_g1/2 rp_g2 = m*n_g2/2 rp_g3 = m*n_g3/2 rp_g4 = m*n_g4/2 #單一正齒輪繪圖呼叫格式 Spur(ctx).Gear(x, y, r, n, pa, \"blue\") # 開始繪製囓合齒輪輪廓 # 繪圖第1齒輪的圓心座標, 因為希望繪圖佔去 canvas.width 的 80%, 所以兩邊各預留 10% 距離 x_g1 = canvas.width*0.1+rp_g1 # y 方向繪圖區域上方預留 canvas.height 的 20% y_g1 = canvas.height*0.2+rp_g1 # 第2齒輪的圓心座標, 假設排列成水平, 表示各齒輪圓心 y 座標相同 x_g2 = x_g1 + rp_g1 + rp_g2 y_g2 = y_g1 # 第3齒輪的圓心座標 x_g3 = x_g1 + rp_g1 + 2*rp_g2 + rp_g3 y_g3 = y_g1 # 第4齒輪的圓心座標 x_g4 = x_g1 + rp_g1 + 2*rp_g2 + 2*rp_g3+rp_g4 y_g4 = y_g1 # 將第1齒輪順時鐘轉 90 度, 也就是 math.pi/2 # 使用 ctx.save() 與 ctx.restore() 以確保各齒輪以相對座標進行旋轉繪圖 ctx.save() # translate to the origin of second gear ctx.translate(x_g1, y_g1) # rotate to engage ctx.rotate(math.pi/2) # put it back ctx.translate(-x_g1, -y_g1) # 繪製第一個齒輪輪廓 Spur(ctx).Gear(x_g1, y_g1, rp_g1, n_g1, pa, \"red\") ctx.restore() ctx.beginPath() ctx.fillStytle = \"#0000ff\" ctx.font = \"20px ScriptS\" ctx.fillText(\"40423222\",x_g1-30,y_g1) ctx.stroke() # 將第2齒輪逆時鐘轉 90 度之後, 再多轉一齒, 以便與第1齒輪進行囓合 ctx.save() # translate to the origin of second gear ctx.translate(x_g2, y_g2) # rotate to engage ctx.rotate(-math.pi/2-math.pi/n_g2) # put it back ctx.translate(-x_g2, -y_g2) Spur(ctx).Gear(x_g2, y_g2, rp_g2, n_g2, pa, \"blue\") ctx.restore() ctx.beginPath() ctx.fillStytle = \"#000000\" ctx.font = \"20px ScriptS\" ctx.fillText(\"40423228\",x_g2-30,y_g2) ctx.stroke() # 將第3齒輪逆時鐘轉 90 度之後, 再往回轉第2齒輪定位帶動轉角, 然後再逆時鐘多轉一齒, 以便與第2齒輪進行囓合 ctx.save() # translate to the origin of second gear ctx.translate(x_g3, y_g3) # rotate to engage # math.pi+math.pi/n_g2 為第2齒輪從順時鐘轉 90 度之後, 必須配合目前的標記線所作的齒輪 2 轉動角度, 要轉換到齒輪3 的轉動角度 # 必須乘上兩齒輪齒數的比例, 若齒輪2 大, 則齒輪3 會轉動較快 # 第1個 -math.pi/2 為將原先垂直的第3齒輪定位線逆時鐘旋轉 90 度 # -math.pi/n_g3 則是第3齒與第2齒定位線重合後, 必須再逆時鐘多轉一齒的轉角, 以便進行囓合 # (math.pi+math.pi/n_g2)*n_g2/n_g3 則是第2齒原定位線為順時鐘轉動 90 度, # 但是第2齒輪為了與第1齒輪囓合, 已經距離定位線, 多轉了 180 度, 再加上第2齒輪的一齒角度, 因為要帶動第3齒輪定位, # 這個修正角度必須要再配合第2齒與第3齒的轉速比加以轉換成第3齒輪的轉角, 因此乘上 n_g2/n_g3 ctx.rotate(-math.pi/2-math.pi/n_g3+(math.pi+math.pi/n_g2)*n_g2/n_g3) # put it back ctx.translate(-x_g3, -y_g3) Spur(ctx).Gear(x_g3, y_g3, rp_g3, n_g3, pa, \"yellow\") ctx.restore() ctx.beginPath() ctx.fillStytle = \"#ff0000\" ctx.font = \"20px ScriptS\" ctx.fillText(\"40423245\",x_g3-30,y_g3) ctx.stroke() # 將第4齒輪逆時鐘轉 90 度之後, 再往回轉第3齒輪定位帶動轉角, 然後再逆時鐘多轉一齒, 以便與第3齒輪進行囓合 ctx.save() # translate to the origin of second gear ctx.translate(x_g4, y_g4) # rotate to engage ctx.rotate(-math.pi/2-math.pi/n_g4+(math.pi+math.pi/n_g2)*n_g2/n_g3+(math.pi+math.pi/n_g3)*n_g3/n_g4) # put it back ctx.translate(-x_g4, -y_g4) Spur(ctx).Gear(x_g4, y_g4, rp_g4, n_g4, pa, \"purple\") ctx.restore() ctx.beginPath() ctx.fillStytle = \"#008000\" ctx.font = \"20px ScriptS\" ctx.fillText(\"40423248\",x_g4-30,y_g4) ctx.stroke() 取自: BG7網誌 四. 在 Onshape 完成相同齒輪組的囓合協同繪圖 2017-06-06 齒輪囓合 from 40423228 on Vimeo .","tags":"Course","url":"./W15.html","title":"20170531w15練習"},{"text":"20170517W13 行走機構 行走機構","tags":"Course","url":"./W13.html","title":"2017/05/17 W13"},{"text":"20170510W12 漸開線齒輪繪製 設定變數 m=模數；t=齒數；a=壓力角 繪製節圓、齒頂圓、齒根圓、基圓 最後繪製完成 將齒環狀排列完成齒輪 尺寸: 節圓 = MT 齒頂圓 = 節圓往外偏移M 齒底圓 = 節圓往內偏移M 基圓 = MTcos(a) Onshape 漸開線齒輪T17 from 40423228 on Vimeo .","tags":"Course","url":"./W12.html","title":"2017/05/10 W12"},{"text":"20170503W11 利用漸開線原理, 以 Brython 繪製單一正齒輪廓 正齒輪傳動繪圖 window.onload=function(){ // 設定 data/py 為共用程式路徑 brython({debug:1, pythonpath:['./../data/py']}); } from browser import document as doc import math # deg 為角度轉為徑度的轉換因子 deg = math.pi/180. # 定義 Spur 類別 class Spur(object): def __init__(self, ctx): self.ctx = ctx def create_line(self, x1, y1, x2, y2, width=3, fill=\"red\"): self.ctx.beginPath() self.ctx.lineWidth = width self.ctx.moveTo(x1, y1) self.ctx.lineTo(x2, y2) self.ctx.strokeStyle = fill self.ctx.stroke() # # 定義一個繪正齒輪的繪圖函式 # midx 為齒輪圓心 x 座標 # midy 為齒輪圓心 y 座標 # rp 為節圓半徑, n 為齒數 # pa 為壓力角 (deg) # rot 為旋轉角 (deg) # 已經針對 n 大於等於 52 齒時的繪圖錯誤修正, 因為 base circle 與齒根圓大小必須進行判斷 def Gear(self, midx, midy, rp, n=20, pa=20, color=\"black\"): # 齒輪漸開線分成 15 線段繪製 imax = 15 # 在輸入的畫布上繪製直線, 由圓心到節圓 y 軸頂點畫一直線 self.create_line(midx, midy, midx, midy-rp) # 畫出 rp 圓, 畫圓函式尚未定義 #create_oval(midx-rp, midy-rp, midx+rp, midy+rp, width=2) # a 為模數 (代表公制中齒的大小), 模數為節圓直徑(稱為節徑)除以齒數 # 模數也就是齒冠大小 a=2*rp/n # d 為齒根大小, 為模數的 1.157 或 1.25倍, 這裡採 1.25 倍 d=2.5*rp/n # ra 為齒輪的外圍半徑 ra=rp+a # 畫出 ra 圓, 畫圓函式尚未定義 #create_oval(midx-ra, midy-ra, midx+ra, midy+ra, width=1) # rb 則為齒輪的基圓半徑 # 基圓為漸開線長齒之基準圓 rb=rp*math.cos(pa*deg) # 畫出 rb 圓 (基圓), 畫圓函式尚未定義 #create_oval(midx-rb, midy-rb, midx+rb, midy+rb, width=1) # rd 為齒根圓半徑 rd=rp-d # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd # 畫出 rd 圓 (齒根圓), 畫圓函式尚未定義 #create_oval(midx-rd, midy-rd, midx+rd, midy+rd, width=1) # dr 則為基圓到齒頂圓半徑分成 imax 段後的每段半徑增量大小 # 將圓弧分成 imax 段來繪製漸開線 # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd if rd>rb: dr = (ra-rd)/imax else: dr=(ra-rb)/imax # tan(pa*deg)-pa*deg 為漸開線函數 sigma=math.pi/(2*n)+math.tan(pa*deg)-pa*deg for j in range(n): ang=-2.*j*math.pi/n+sigma ang2=2.*j*math.pi/n+sigma lxd=midx+rd*math.sin(ang2-2.*math.pi/n) lyd=midy-rd*math.cos(ang2-2.*math.pi/n) for i in range(imax+1): # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd if rd>rb: r=rd+i*dr else: r=rb+i*dr theta=math.sqrt((r*r)/(rb*rb)-1.) alpha=theta-math.atan(theta) xpt=r*math.sin(alpha-ang) ypt=r*math.cos(alpha-ang) xd=rd*math.sin(-ang) yd=rd*math.cos(-ang) # i=0 時, 繪線起點由齒根圓上的點, 作為起點 if(i==0): last_x = midx+xd last_y = midy-yd # 由左側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點 self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color) # 最後一點, 則為齒頂圓 if(i==imax): lfx=midx+xpt lfy=midy-ypt last_x = midx+xpt last_y = midy-ypt # the line from last end of dedendum point to the recent # end of dedendum point # lxd 為齒根圓上的左側 x 座標, lyd 則為 y 座標 # 下列為齒根圓上用來近似圓弧的直線 self.create_line((lxd),(lyd),(midx+xd),(midy-yd),fill=color) for i in range(imax+1): # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd if rd>rb: r=rd+i*dr else: r=rb+i*dr theta=math.sqrt((r*r)/(rb*rb)-1.) alpha=theta-math.atan(theta) xpt=r*math.sin(ang2-alpha) ypt=r*math.cos(ang2-alpha) xd=rd*math.sin(ang2) yd=rd*math.cos(ang2) # i=0 時, 繪線起點由齒根圓上的點, 作為起點 if(i==0): last_x = midx+xd last_y = midy-yd # 由右側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點 self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color) # 最後一點, 則為齒頂圓 if(i==imax): rfx=midx+xpt rfy=midy-ypt last_x = midx+xpt last_y = midy-ypt # lfx 為齒頂圓上的左側 x 座標, lfy 則為 y 座標 # 下列為齒頂圓上用來近似圓弧的直線 self.create_line(lfx,lfy,rfx,rfy,fill=color) canvas = doc['onegear'] ctx = canvas.getContext(\"2d\") x = (canvas.width)/2 y = (canvas.height)/2 r = 0.8*(canvas.height/2) # 齒數 n = 53 # 壓力角 pa = 20 Spur(ctx).Gear(x, y, r, n, pa, \"blue\")","tags":"Course","url":"./W11.html","title":"2017/05/03 W11"},{"text":"20170426W10期中協同查驗與自評 一.Fourbar Walker Vrep 一. Fourbar Walker Vrep A零件固定經由轉動軸joint使B旋轉，B經由joint0 、joint3帶動C、E，再分別以joint2、joint4帶動D、F，最後經由joint3、joint5連回A。 並用Dummy放再最後拘束其運動，Dummy連接Dummy0，Dummy1連接Dummy2 另一側作法亦同 影片: Fourbar Walker Vrep from 40423228 on Vimeo .","tags":"Course","url":"./W10.html","title":"2017/04/26 W10"},{"text":"20170419W9期中協同查驗與自評 一.Fossil Server 實習查驗 二.四連桿機構協同 Trace Point 查驗 三.Fourbar Walker OnShape 零件協同繪圖與組立查驗 一. Fossil Server 實習查驗 fossil_bg7 二. 四連桿機構協同 Trace Point 查驗 參考的網際程式 window.onload=function(){ brython(1); } from browser import document as doc from browser import html import math # 準備繪圖畫布 canvas = doc[\"fourbar\"] container1 = doc['container1'] ctx = canvas.getContext(\"2d\") fourbar_data = open(\"./../data/w9/0419-2.csv\").read() fourbar_list = fourbar_data.splitlines() #container1 <= fourbar_list[0] # 以下可以利用 ctx 物件進行畫圖 # 先畫一條直線 ctx.beginPath() # 設定線的寬度為 1 個單位 ctx.lineWidth = 1 # 利用 transform 將 y 座標反轉, 且 offset canvas.height # (X scale, X skew, Y skew, Y scale, X offset, Y offset) # 配合圖形位置進行座標轉換 ctx.transform(1, 0, 0, -1, canvas.width/2+250, canvas.height/2+100) # 畫出 x 與 y 座標線 # 各座標值放大 8 倍 ratio = 3 ctx.moveTo(0, 0) ctx.lineTo(-30*ratio, 0) start_point = fourbar_list[0].split(\",\") ctx.moveTo(float(start_point[0])*ratio, float(start_point[1])*ratio) count = 0 for data in fourbar_list[1:]: point = data.split(\",\") #count = count + 1 #container1 <= str(count) + \":\" + point[0] + \",\" + point[1] #container1 <= html.BR() ctx.lineTo(float(point[0])*ratio, float(point[1])*ratio) # 設定顏色為藍色, 也可以使用 \"rgb(0, 0, 255)\" 字串設定顏色值 ctx.strokeStyle = \"blue\" # 實際執行畫線 ctx.stroke() ctx.closePath() 影片: 40423228機械設計-協同產品設計課程W9-mission2 from 40423228 on Vimeo . 三. Fourbar Walker OnShape 零件協同繪圖與組立查驗 影片: 40423228機械設計-協同產品設計課程W9-mission3 from 40423228 on Vimeo . 40423228機械設計-協同產品設計課程W9-mission3-動畫 from 40423228 on Vimeo .","tags":"Course","url":"./W9.html","title":"2017/04/19 W9"},{"text":"20170412W8上課內容 一.各組期中簡報 (含影片拍攝與上傳) 與評分 一. 各組期中簡報 (含影片拍攝與上傳) 與評分 第一周連結 一.觀看這學期的課程大綱 二.了解如何使用stunnel 三.開啟Leo利用Scite編輯Start.bat 四.利用python程式碼控制Vrep裡的單連桿作動 第二周連結 一.利用python找出缺課人員 二.利用 Solvespace 進行四連桿機構組立並轉為st檔 第三周連結 一.寫出影片的英文逐字稿 二.Solvespace 30-50-60 cm 比例的四連桿組立，並轉出 stl 檔案，以 import 方式轉入 V-rep 三.Onshape 完成與第二點相同尺寸之四連桿機構, 以 stl 轉出 (或其他格式) 後, 再轉入 V-rep 四.在 50 連桿上加上 50-50-50 正三角形, 以 Solvespace 輸入該三角形頂點運動軌跡 五.驗證上述四連桿運動軌跡, 是否正確, 並在分組網頁中執行該四連桿機構的運動模擬 第四周連結 一.建立各組協同主機 二.在OnShape繪出單連桿機構並轉成STL 三.在SolveSpace繪出單連桿機構並轉成STL 第五周連結 一.fossil筆記倉儲主頁顯示作業 二.將單連桿轉入V-rep並使其作動 第六周連結 一.利用Onshape的變數指令繪製四連桿並匯入V-rep 第七周連結 一.利用fossil對倉儲進行管理 二.利用Onshape繪製八連桿 心得及自評 雖然中間落後了幾周但後來漸漸跟上了，之後也總算能跟著進度沒有落後，希望接下來至期末的幾周也能不落後每周跟上，能盡快搞熟fossil，自評65分。 影片: stunnel設定 Solvespace 30-50-60 cm 比例的四連桿組立 Onshape 四連桿機構 四連桿軌跡圖 0315單連桿-OnShape 0315單連桿-SolveSpace 20170322 單連桿vrep作動 0322 fourlink part1 20170322 fourlink part2 20170329四連桿 20170405 八連桿零件part1 20170405 八連桿零件part2 20170405 八連桿組裝part1 20170405 八連桿組裝part2","tags":"Course","url":"./W8.html","title":"2017/04/12 W8"},{"text":"20170405W7上課內容 一.利用fossil對倉儲進行管理 二.利用Onshape繪製八連桿 三.利用Vrep使八連桿作動 一. 利用fossil對倉儲進行管理 對fossil管理的指令: fossil clone uri foo.fossil fossil open ./../../foo.fossil (開啟) fossil add . fossil remote-url off (將自動推送改為手動，這是與git不同之處，fossil會自動推送) fossil push https://user@192.168.X.XX (IP可用ipconfig/all找到) 二. 利用Onshape繪製八連桿 三. 利用Vrep使八連桿作動 影片: (1).零件 20170405 part1 from 40423228 on Vimeo . (2).零件 20170405 part2 from 40423228 on Vimeo . (3).組合 20170405 part3 from 40423228 on Vimeo . (4).組合 20170405 part4 from 40423228 on Vimeo . Vrep 八連桿Vrep from 40423228 on Vimeo .","tags":"Course","url":"./W7.html","title":"2017/04/05 W7"},{"text":"20170329W6上課內容 一.利用Onshape的變數指令繪製四連桿並匯入V-rep 一. 利用Onshape的變數指令繪製四連桿並匯入V-rep 影片: 20170329四連桿 from 40423228 on Vimeo .","tags":"Course","url":"./W6.html","title":"2017/03/29 W6"},{"text":"20170322W5上課內容 一.fossil筆記倉儲主頁顯示作業 二.將單連桿轉入V-rep並使其作動 一. fossil筆記倉儲主頁顯示作業 二. 將單連桿轉入V-rep並使其作動 (1).把零件拆開 (2).加入旋轉軸，並設定尺寸 (3).將旋轉軸與軸定位在同一位子 (4).設定從屬關係 →將旋轉軸拉到底座下 →將上方桿子拉至旋轉軸下 (5).設定旋轉軸素質 →設定角速度 →將上方的桿子設定為動態物件 (6).讓我們繪製的軸不要顯示於頁面 三 將四連桿轉入V-rep並使其作動 作法與單連桿相近，差別在於多加入了Dummy 第五週心得 這周將上禮拜繪製的單連桿放入Vrep之中並設定使其旋轉，與之前不同的是又多加了一個Dummy。再組裝設定的時候一直遇到問題無法旋轉再摸索了一下後總算令其能在Vrep中旋轉了。 影片: 20170322 單連桿vrep作動 from 40423228 on Vimeo . 0322 四連桿 part1 from 40423228 on Vimeo . 20170322 四連桿 part2 from 40423228 on Vimeo .","tags":"Course","url":"./W5.html","title":"2017/03/22 W5"},{"text":"20170315W4上課內容 一.建立各組協同主機 二.在OnShape繪出單連桿機構並轉成STL 三.在SolveSpace繪出單連桿機構並轉成STL 一. 建立各組協同主機 2017springcd_bg7： bg7 二. 在OnShape繪出單連桿機構並轉成STL Onshape單連桿機構 三. 在SolveSpace繪出單連桿機構並轉成STL 第四週心得 這周開始繪製單連桿機構，使用SolveSpaces組裝以後剛開始一直無法順利旋轉，後來終於知道是限制條件弄太多，經過修正後終於能順轉。 影片: 0315單連桿-OnShape from 40423228 on Vimeo . 0315單連桿-SolveSpace from 40423228 on Vimeo .","tags":"Course","url":"./W4.html","title":"2017/03/15 W4"},{"text":"20170308W3上課內容 一.寫出影片的英文逐字稿 二.Solvespace 30-50-60 cm 比例的四連桿組立，並轉出 stl 檔案，以 import 方式轉入 V-rep 三.Onshape 完成與第二點相同尺寸之四連桿機構, 以 stl 轉出 (或其他格式) 後, 再轉入 V-rep 四.在 50 連桿上加上 50-50-50 正三角形, 以 Solvespace 輸入該三角形頂點運動軌跡 五.驗證上述四連桿運動軌跡, 是否正確, 並在分組網頁中執行該四連桿機構的運動模擬 一. 至 課程網頁 w3 Hyperworks 處瀏覽 10 個影片, 選兩個影片, 寫出該影片的英文逐字稿 Hyperworks1 Hyperworks2 Hyperworks3 Hyperworks4 Hyperworks 14-1 Hyperworks 14-2 Hyperworks 14-3 Hyperworks 14-4 Hyperworks 14-5 Hyperworks 14-6 影片擇二翻譯 二. Solvespace 30-50-60 cm 比例的四連桿組立，並轉出 stl 檔案，以 import 方式轉入 V-rep 先至 課程倉儲 下載\"fourbarlinkage\" 開啟SolveSpace畫 開啟fourbarlinkage裡的 link_30、link_50、link_60 並依序組裝形成四連桿 三. Onshape 完成與第二點相同尺寸之四連桿機構, 以 stl 轉出 (或其他格式) 後, 再轉入 V-rep 四. 在 50 連桿上加上 50-50-50 正三角形, 以 Solvespace 輸入該三角形頂點運動軌跡 五. 驗證上述四連桿運動軌跡, 是否正確, 並在分組網頁中執行該四連桿機構的運動模擬 from math import pi , cos , sin , sqrt , acos radian = 180 / pi degree = pi / 180 #PLAP def plap ( ax , ay , ac , bac , bx , by , pos ): if pos == 0 : cx = ac * cos ( bac - acos (( ax ** 2 - 2 * ax * bx + ay ** 2 - 2 * ay * by + bx ** 2 + by ** 2 + abs ( ax - bx ) ** 2 - abs ( ay - by ) ** 2 ) / ( 2 * sqrt ( ax ** 2 - 2 * ax * bx + ay ** 2 - 2 * ay * by + bx ** 2 + by ** 2 ) * abs ( ax - bx )))) + ax cy = ac * sin ( bac - acos (( ax ** 2 - 2 * ax * bx + ay ** 2 - 2 * ay * by + bx ** 2 + by ** 2 + abs ( ax - bx ) ** 2 - abs ( ay - by ) ** 2 ) / ( 2 * sqrt ( ax ** 2 - 2 * ax * bx + ay ** 2 - 2 * ay * by + bx ** 2 + by ** 2 ) * abs ( ax - bx )))) + ay else : cx = ac * cos ( bac + acos (( ax ** 2 - 2 * ax * bx + ay ** 2 - 2 * ay * by + bx ** 2 + by ** 2 + abs ( ax - bx ) ** 2 - abs ( ay - by ) ** 2 ) / ( 2 * sqrt ( ax ** 2 - 2 * ax * bx + ay ** 2 - 2 * ay * by + bx ** 2 + by ** 2 ) * abs ( ax - bx )))) + ax cy = ac * sin ( bac + acos (( ax ** 2 - 2 * ax * bx + ay ** 2 - 2 * ay * by + bx ** 2 + by ** 2 + abs ( ax - bx ) ** 2 - abs ( ay - by ) ** 2 ) / ( 2 * sqrt ( ax ** 2 - 2 * ax * bx + ay ** 2 - 2 * ay * by + bx ** 2 + by ** 2 ) * abs ( ax - bx )))) + ay return cx , cy #PLLP def pllp ( ax , ay , ac , cb , bx , by , pos ): if pos == 0 : cx = - (( ay - by ) * ( - ac ** 2 * ay + ac ** 2 * by + ax ** 2 * ay + ax ** 2 * by - 2 * ax * ay * bx - 2 * ax * bx * by + ay ** 3 - ay ** 2 * by + ay * bx ** 2 - ay * by ** 2 + ay * cb ** 2 + bx ** 2 * by + by ** 3 - by * cb ** 2 - sqrt (( - ac ** 2 + 2 * ac * cb + ax ** 2 - 2 * ax * bx + ay ** 2 - 2 * ay * by + bx ** 2 + by ** 2 - cb ** 2 ) * ( ac ** 2 + 2 * ac * cb - ax ** 2 + 2 * ax * bx - ay ** 2 + 2 * ay * by - bx ** 2 - by ** 2 + cb ** 2 )) * ( ax - bx )) + ( ac ** 2 - ax ** 2 - ay ** 2 + bx ** 2 + by ** 2 - cb ** 2 ) * ( ax ** 2 - 2 * ax * bx + ay ** 2 - 2 * ay * by + bx ** 2 + by ** 2 )) / ( 2 * ( ax - bx ) * ( ax ** 2 - 2 * ax * bx + ay ** 2 - 2 * ay * by + bx ** 2 + by ** 2 )) cy = ( - ac ** 2 * ay + ac ** 2 * by + ax ** 2 * ay + ax ** 2 * by - 2 * ax * ay * bx - 2 * ax * bx * by + ay ** 3 - ay ** 2 * by + ay * bx ** 2 - ay * by ** 2 + ay * cb ** 2 + bx ** 2 * by + by ** 3 - by * cb ** 2 + sqrt (( - ac ** 2 + 2 * ac * cb + ax ** 2 - 2 * ax * bx + ay ** 2 - 2 * ay * by + bx ** 2 + by ** 2 - cb ** 2 ) * ( ac ** 2 + 2 * ac * cb - ax ** 2 + 2 * ax * bx - ay ** 2 + 2 * ay * by - bx ** 2 - by ** 2 + cb ** 2 )) * ( - ax + bx )) / ( 2 * ( ax ** 2 - 2 * ax * bx + ay ** 2 - 2 * ay * by + bx ** 2 + by ** 2 )) else : cx = - (( ay - by ) * ( - ac ** 2 * ay + ac ** 2 * by + ax ** 2 * ay + ax ** 2 * by - 2 * ax * ay * bx - 2 * ax * bx * by + ay ** 3 - ay ** 2 * by + ay * bx ** 2 - ay * by ** 2 + ay * cb ** 2 + bx ** 2 * by + by ** 3 - by * cb ** 2 + sqrt (( - ac ** 2 + 2 * ac * cb + ax ** 2 - 2 * ax * bx + ay ** 2 - 2 * ay * by + bx ** 2 + by ** 2 - cb ** 2 ) * ( ac ** 2 + 2 * ac * cb - ax ** 2 + 2 * ax * bx - ay ** 2 + 2 * ay * by - bx ** 2 - by ** 2 + cb ** 2 )) * ( ax - bx )) + ( ac ** 2 - ax ** 2 - ay ** 2 + bx ** 2 + by ** 2 - cb ** 2 ) * ( ax ** 2 - 2 * ax * bx + ay ** 2 - 2 * ay * by + bx ** 2 + by ** 2 )) / ( 2 * ( ax - bx ) * ( ax ** 2 - 2 * ax * bx + ay ** 2 - 2 * ay * by + bx ** 2 + by ** 2 )) cy = ( - ac ** 2 * ay + ac ** 2 * by + ax ** 2 * ay + ax ** 2 * by - 2 * ax * ay * bx - 2 * ax * bx * by + ay ** 3 - ay ** 2 * by + ay * bx ** 2 - ay * by ** 2 + ay * cb ** 2 + bx ** 2 * by + by ** 3 - by * cb ** 2 + sqrt (( - ac ** 2 + 2 * ac * cb + ax ** 2 - 2 * ax * bx + ay ** 2 - 2 * ay * by + bx ** 2 + by ** 2 - cb ** 2 ) * ( ac ** 2 + 2 * ac * cb - ax ** 2 + 2 * ax * bx - ay ** 2 + 2 * ay * by - bx ** 2 - by ** 2 + cb ** 2 )) * ( ax - bx )) / ( 2 * ( ax ** 2 - 2 * ax * bx + ay ** 2 - 2 * ay * by + bx ** 2 + by ** 2 )) return cx , cy ax = - 60 ay = 0 bx = 0 by = 0 bac = 50 * degree ac = 30 cd = 50 db = 60 ce = 50 ed = 50 cx , cy = plap ( ax , ay , ac , bac , bx , by , 0 ) print ( \"cx=\" , cx , \"cy=\" , cy ) dx , dy = pllp ( cx , cy , cd , db , bx , by , 0 ) print ( \"dx=\" , dx , \"dy=\" , dy ) ex , ey = pllp ( cx , cy , ce , ed , dx , dy , 0 ) print ( \"ex=\" , ex , \"ey=\" , ey ) 第三週心得 這周各組要從10部影片裡找出兩部翻譯，才發現自己英文的聽力十分不足，幾乎每句都聽不懂，希望能盡快補足英文聽力的能力。 第三週影片 任務二 Solvespace 30-50-60 cm 比例的四連桿組立 from 40423228 on Vimeo . 任務三 Onshape 完成與第二點相同尺寸之四連桿機構 from 40423228 on Vimeo . 任務四、五 四連桿軌跡圖 from 40423228 on Vimeo . 40423228機械設計工程系-協同產品設計實習課程-W1 from 40423228 on vimeo .","tags":"Course","url":"./W3.html","title":"2017/03/08 W3"},{"text":"20170301W2上課內容 一.利用python找出缺課人員 二.利用 Solvespace 進行四連桿機構組立並轉為st檔 一. 利用python找出缺課人員 程式碼可至 課程倉儲 下載 \"cd_w2.py\"座位程式碼，\"w2b_cadlab.txt\"座位表 座位程式碼 import os 讀取w2b_cadlab.txt的檔案將其儲存為adata，並設定encoding為utf-8 adata = open(\"w2b_cadlab.txt\", encoding=\"utf-8\").read() 讀取w2b_registered.txt的檔案將其儲存為rdata，並一行一行隔開，並設定encoding為utf-8 rdata = open(\"w2b_registered.txt\", encoding=\"utf-8\").read().splitlines() 列印出adata，以便檢查結果 print(adata) 利用splitlines將adata一行一行隔開並其儲存為alist alist = adata.splitlines() 列印出alist[2]，以便檢查結果 print(alist[2]) 將變數n儲存為0 n = 0 將列從0開始算起 row = 0 將final_list儲存為一個空的數列 final_list = [] 將w2_list儲存為一個空的數列 w2_list = [] 執行一個for迴圈從第二列開始 for stud_num in alist[2:]: #每執行完一次迴圈列數+1 row = row + 1 #執行完迴圈後用\\將其隔開並儲存為blist blist = stud_num.split(\"\\t\") #列印出blist，以便檢查結果 #print(blist) #將行從0開始算起 column = 0 #執行一個for迴圈去取得blist裡的數列 for i in range(len(blist)): #每執行完一次迴圈行數+1 column = column + 1 #假如blist數列裡不是空白 if blist[i] != \"\": #列印出blist[i]，以便檢查結果 #print(blist[i]) #將組序有用_隔開的儲存為clist clist = blist[i].split(\" \") #將組序+ +學號+ +列+行的資料儲存為stud_data stud_data = clist[0]+\" \"+clist[1]+\" \"+str(row)+\" \"+str(column) #將stud_data結果附加在final_list的資料裡 final_list.append(stud_data) #將clist[1]結果附加在w2_list的資料裡 w2_list.append(clist[1]) #每執行完一次迴圈n+1 n = n +1 根據數列前導字串排序, 目的在建立分組數列 group_list = sorted(final_list) 列印出分組名單 print(\"分組名單:\") 執行一個for迴圈去取得group_list裡的數列 for i in range(len(group_list)): #列印出 group_list[i]的資料 print(group_list[i]) 列印出座位列表 print(\"座位列表:\") 執行一個for迴圈去取得final_list裡的數列 for i in range(len(final_list)): #列印出 final_list[i]的資料 print(final_list[i]) 執行一個for迴圈去取得rdata裡的數列 for i in range(len(rdata)): #假如有在rdata裡但沒有在w2_list裡，目的在找出缺席學生 if rdata[i] not in w2_list: #列印出 rdata[i]的資料，缺席學生 print(\"缺席學生:\", rdata[i]) 列印出學生總數n個 print(\"學生總數:\", n) print(os.environ) 二. 利用 Solvespace 進行四連桿機構組立並轉為st檔 先至 課程倉儲 下載\"fourbarlinkage\" 開啟SolveSpace畫 開啟fourbarlinkage裡的 link_30、link_50、link_60 並依序組裝形成四連桿 第二週心得 這周學到了使用程式碼來解決資料的方便，也開始學習使用Vrep。 第二週影片 Solvespace 30-50-60 cm 比例的四連桿組立 from 40423228 on Vimeo . 40423228機械設計工程系-協同產品設計實習課程-W1 from 40423228 on vimeo .","tags":"Course","url":"./W2.html","title":"2017/03/01 W2"},{"text":"20170222W1上課內容 一.觀看這學期的課程大綱 二.了解如何使用stunnel 三.開啟Leo利用Scite編輯Start.bat 四.利用python程式碼控制Vrep裡的單連桿作動 一.可至 2017 Spring 協同產品設計實習 觀看這學期的課程大綱 二. 了解如何使用stunnel 在按下start之後，會出現錯誤的圖案 ， 這是因為stunnel資料夾裡的config/styunnel.conf裡的ip與電腦的ip不同可至cmd打ipconfig/all的指令，找到電腦的ip位置並將其複製、貼到styunnel.conf裡 自己IP 修改IP(accept後面的IP) 三.開啟Leo 利用Scite編輯Start.bat 四.利用python程式碼控制Vrep裡的單連桿作動。 可至 課程倉儲 的data裡下載fourbar_eightbar_solvespace_vrep.7z以及onelink_vrep_remoteapi_pos_vel.7z並解壓縮，裡面有單連桿、四連桿及八連桿三個檔案，可試著在solvespace及Vrep裡開啟。 在Vrep裡開啟one_link_robot_remoteAPI.ttt的檔案(ttt是Vrep檔案的副檔名)，在SciTE裡開啟one_link_robot_remoteAPI_joint_target_vel.py的檔案，按下Tool裡的Go即可開始控制單連桿，按Enter會旋轉，按P會暫停。 第一週心得 經過上學期的學習以後發現這學期學的課程變得有點難，每周還要有組別上台報告自己組的該周進度，希望這學期可以早點進入狀況。 第一週影片 stunnel設定 from 40423228 on Vimeo . 40423228機械設計工程系-協同產品設計實習課程-W1 from 40423228 on vimeo .","tags":"Course","url":"./W1.html","title":"2017/02/22 W1"},{"text":"group7 網誌 、 投影片 、 倉儲 40423202 網誌 、 投影片 、 倉儲 40423221 網誌 、 投影片 、 倉儲 40423222 網誌 、 投影片 、 倉儲 40423228 網誌 、 投影片 、 倉儲 40423245 網誌 、 投影片 、 倉儲 40423248 網誌 、 投影片 、 倉儲 40423251 網誌 、 投影片 、 倉儲","tags":"Course","url":"./group.html","title":"bg7成員"}]};